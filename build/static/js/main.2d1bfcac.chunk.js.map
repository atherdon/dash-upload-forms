{"version":3,"sources":["clients/apollo.ts","clients/themeForGenerated.tsx","components/GeneratedForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["client","ApolloClient","uri","process","REACT_APP_SERVER_URL","cache","InMemoryCache","theme","templates","FieldTemplate","props","classNames","help","description","children","errors","rawErrors","label","Form","Field","required","className","ObjectFieldTemplate","properties","map","p","content","fields","StringField","Input","value","formData","error","onChange","e","currentTarget","BooleanField","Checkbox","title","checked","data","renderers","saveButton","Button","disabled","isSaved","onClick","save","primary","cancelButton","cancel","header","Header","as","jsonSchema","require","ReactApolloForm","configure","GeneratedForm","document","name","ui","showErrorsInline","config","mutation","postOneTopAuthorSchema","postOneBrandSchema","TOP_AUTHOR","BRAND","PostOneTopAuthor","PostOneBrand","linkCls","location","link","Menu","withRouter","history","useHistory","useState","pathname","setLocation","useEffect","clean","listen","to","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2d1bfcac.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_SERVER_URL,\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import { Button, Input, Checkbox, Header, Form } from 'semantic-ui-react';\nimport { ApolloFormConfigureTheme } from 'react-apollo-form';\n\ntype FieldProps = any;\n\nconst theme: ApolloFormConfigureTheme = {\n  templates: {\n    FieldTemplate: (props): any => {\n        const { classNames, help, description, errors, children, rawErrors, label } = props;\n        return (\n            <Form.Field>\n                <label>{label !== 'data' && label}{props.required && '*'}</label>\n                {children}\n                <span>{description}</span>\n                <span className={'error'}>{rawErrors}</span>\n            </Form.Field>\n        );\n    },\n    ObjectFieldTemplate: props => {\n        return (\n            <div>\n                {props.properties.map((p: any) => p.content)}\n            </div>\n        );\n    }\n  },\n  fields: {\n      StringField: (p: FieldProps): any => (\n          <Input value={p.formData} error={true} onChange={\n              (e: React.SyntheticEvent<HTMLInputElement>) => p.onChange(e.currentTarget.value)\n          } />\n      ),\n      BooleanField: (p: FieldProps) => (\n          <Checkbox label={p.title} checked={p.formData} onChange={\n              (e: React.SyntheticEvent<HTMLInputElement>, data: object) => {\n                  // tslint:disable-next-line:no-any\n                  p.onChange((data as any).checked);\n              }\n          } />\n      )\n  },\n  renderers: {\n      saveButton: (p) => {     \n        return (\n            <Button className=\"button\" disabled={p.isSaved} onClick={p.save} primary={true}>\n                {p.isSaved ? 'Saved' : 'Save'}\n            </Button>\n          );\n      },\n      cancelButton: p => (\n          <Button className=\"button\" onClick={p.cancel}>\n              Cancel\n          </Button>\n      ),\n      header: p => (\n          <Header as=\"h1\">{p.title}</Header>\n      ),\n  }\n};\n\nexport default theme;","// eslint-disable-next-line no-use-before-define\nimport * as React from 'react';\nimport { configure } from 'react-apollo-form';\nimport type { DocumentNode } from '@apollo/client';\nimport client from '../clients/apollo';\nimport theme from '../clients/themeForGenerated';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst jsonSchema = require('../generatedForm/apollo-form-json-schema.json');\n\nconst ReactApolloForm = configure<ApolloFormMutationNames>({\n  // tslint:disable-next-line:no-any\n  client: client as any,\n  jsonSchema,\n  theme,\n});\n\ninterface GeneratedFormProps {\n  document: DocumentNode;\n  name: ApolloFormMutationNames;\n}\n\nconst GeneratedForm = (props: GeneratedFormProps): React.ReactElement => {\n  const { document, name } = props;\n  return (\n    <ReactApolloForm\n      title={name}\n      ui={{ showErrorsInline: true }}\n      config={{\n        mutation: {\n          name,\n          document,\n        },\n      }}\n      data={{}}\n    />\n  );\n};\n\nexport default GeneratedForm;\n","// eslint-disable-next-line no-use-before-define\nimport React, { useEffect, useState } from 'react';\nimport { ApolloProvider, DocumentNode } from '@apollo/client';\nimport { Switch, Route, Link, useHistory, withRouter } from 'react-router-dom';\nimport { loader } from 'graphql.macro';\nimport client from './clients/apollo';\nimport GeneratedForm from './components/GeneratedForm';\nimport './App.scss';\n\nconst postOneTopAuthorSchema: DocumentNode = loader('./models/postOneTopAuthor.graphql');\nconst postOneBrandSchema: DocumentNode = loader('./models/postOneBrand.graphql');\n\nconst TOP_AUTHOR = 'postOneTopAuthor';\nconst BRAND = 'postOneBrand';\n\nconst PostOneTopAuthor = () => (\n  <div className=\"form\">\n    <GeneratedForm name={TOP_AUTHOR} document={postOneTopAuthorSchema} />\n  </div>\n);\n\nconst PostOneBrand = () => (\n  <div className=\"form\">\n    <GeneratedForm name={BRAND} document={postOneBrandSchema} />\n  </div>\n);\n\ninterface MenuProps {\n  children: React.ReactElement[] | React.ReactElement;\n}\n\n/**\n * Get class for link\n * @param location [string] : current location\n * @param link [string] : target link\n */\nfunction linkCls(location: string, link: string) {\n  return location === `/${link}` ? 'selected' : 'link';\n}\nfunction Menu(props: MenuProps): React.ReactElement {\n  const { children } = props;\n  return (\n    <div className=\"menu\">\n      <h1>Menu</h1>\n      {children}\n    </div>\n  );\n}\n\nfunction App(): React.ReactElement {\n  const history = useHistory();\n  const [location, setLocation] = useState<string>(history.location.pathname);\n  useEffect(() => {\n    const clean = history.listen(() => {\n      setLocation(history.location.pathname);\n    });\n    return () => {\n      clean();\n    };\n  });\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"container\">\n        <Menu>\n          <Link className={linkCls(location, TOP_AUTHOR)} to={`/${TOP_AUTHOR}`}>\n            {TOP_AUTHOR}\n          </Link>\n          <Link className={linkCls(location, BRAND)} to={`/${BRAND}`}>\n            {BRAND}\n          </Link>\n        </Menu>\n        <Switch>\n          <Route path={`/${TOP_AUTHOR}`} component={PostOneTopAuthor} />\n          <Route path={`/${BRAND}`} component={PostOneBrand} />\n        </Switch>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default withRouter(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// eslint-disable-next-line no-use-before-define\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}